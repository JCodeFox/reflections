4. What happens when you initialize a repository? Why do you need to do it?

	It creates a .git folder. The .git folder is where all the commits go.

7. How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area allows you to add only certain changes to a commit,
	while a working directory is where your repository is.
	I think the staging area is useful for splitting up a change or
	multiple changes into multiple commits.

12. How can you use the staging area to make sure you have one commit per logical
change?
	
	The staging area allows you to commit just the files you choose,
	allowing me to discard some changes and keep others.

15. What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches may be helpful when adding a new experimental feature, or adding a new
	feature. They allow you to have multiple versions of your repository at once.

20. How do the diagrams help you visualize the branch structure?
	They show you where you created new branches and what branches come from what.

25. What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	It turns the two branches into one.
	We show the diagram that way to show were branches were made and when they were merged.

32. What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	The automatic will be faster and easier, but may cause bugs and errors.
	While the manual is harder and takes time, it will allow you to prevent bugs
	in the code.